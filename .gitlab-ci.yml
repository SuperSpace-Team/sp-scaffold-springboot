stages:
  - sonar-qube
  - mvn-package
  - docker-build

# 代码扫描
sonar-qube:
  # 场景为 sonar-qube
  stage: sonar-qube
  # 根据需要自定义执行的脚本
  script:
    - itwork_mvn_sonar
  when: manual

# 编译打包并复制jar/war到缓存
mvn-package:
  stage: mvn-package
  script:
    - mvn clean package -Dmaven.test.failure.ignore=true -DskipTests=true -U
    # 复制Maven构建后的文件到Docker构建预定义的缓存目录,并重命名app.jar
    - cp target/app.jar ${CACHE_PIPELINE}/app.jar
  # 根据需要自定义在哪个分支上可用
  only:
    - master
    - tags
    - develop
    - /^feature-.*$/
    - /^release-.*$/
    - /^hotfix-.*$/

# 构建Docker镜像
docker-build:
  stage: docker-build
  script:
    # 使用默认Dockerfile文件
    - update_dockerfile
    # 构建镜像docker-build [Dockerfile文件所在的目录,默认为当前目录"."]
    - docker_build .
    # 更新chart配置，默认使用代码中的chart配置文件；update_chart_base [版本号] [版本类型server或front]
    - update_charts_base v3 server
    # 构建版本
    - chart_build
  # 根据需要自定义在哪个分支上可用
  only:
    - master
    - tags
    - develop
    - /^feature-.*$/
    - /^release-.*$/
    - /^hotfix-.*$/

.auto_devops: &auto_devops |
  http_status_code=`curl -o .auto_devops.sh -s -m 10 --connect-timeout 10 -w %{http_code} "${CHOERODON_URL}/devops-action/ci?gitlabProjectId=${CI_PROJECT_ID}&pipelineId=${CI_PIPELINE_ID}&token=${Token}&type=base&version=v1"`
  if [ "$http_status_code" != "200" ]; then
    cat .auto_devops.sh
    exit 1
  fi
  source .auto_devops.sh

# 开始执行脚本前所需执行脚本
before_script:
  - *auto_devops
  - update_ci_settings
